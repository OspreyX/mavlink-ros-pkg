/* Auto-generated by genmsg_cpp for file /home/pixhawk/matthias/ros/lcm_mavlink_ros/msg/Mavlink.msg */
#ifndef LCM_MAVLINK_ROS_MESSAGE_MAVLINK_H
#define LCM_MAVLINK_ROS_MESSAGE_MAVLINK_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "roslib/Header.h"

namespace lcm_mavlink_ros
{
template <class ContainerAllocator>
struct Mavlink_ : public ros::Message
{
  typedef Mavlink_<ContainerAllocator> Type;

  Mavlink_()
  : header()
  , len(0)
  , seq(0)
  , sysid(0)
  , compid(0)
  , msgid(0)
  , fromlcm(false)
  , payload()
  {
  }

  Mavlink_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , len(0)
  , seq(0)
  , sysid(0)
  , compid(0)
  , msgid(0)
  , fromlcm(false)
  , payload(_alloc)
  {
  }

  typedef  ::roslib::Header_<ContainerAllocator>  _header_type;
   ::roslib::Header_<ContainerAllocator>  header;

  typedef uint8_t _len_type;
  uint8_t len;

  typedef uint8_t _seq_type;
  uint8_t seq;

  typedef uint8_t _sysid_type;
  uint8_t sysid;

  typedef uint8_t _compid_type;
  uint8_t compid;

  typedef uint8_t _msgid_type;
  uint8_t msgid;

  typedef uint8_t _fromlcm_type;
  uint8_t fromlcm;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _payload_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  payload;


  ROSCPP_DEPRECATED uint32_t get_payload_size() const { return (uint32_t)payload.size(); }
  ROSCPP_DEPRECATED void set_payload_size(uint32_t size) { payload.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_payload_vec(std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) const { vec = this->payload; }
  ROSCPP_DEPRECATED void set_payload_vec(const std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) { this->payload = vec; }
private:
  static const char* __s_getDataType_() { return "lcm_mavlink_ros/Mavlink"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "cd609ddc2b0642cb6f5fb5ca07f1fb77"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Header header\n\
uint8 len\n\
uint8 seq\n\
uint8 sysid\n\
uint8 compid\n\
uint8 msgid\n\
bool fromlcm\n\
uint8[] payload\n\
\n\
================================================================================\n\
MSG: roslib/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, len);
    ros::serialization::serialize(stream, seq);
    ros::serialization::serialize(stream, sysid);
    ros::serialization::serialize(stream, compid);
    ros::serialization::serialize(stream, msgid);
    ros::serialization::serialize(stream, fromlcm);
    ros::serialization::serialize(stream, payload);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, len);
    ros::serialization::deserialize(stream, seq);
    ros::serialization::deserialize(stream, sysid);
    ros::serialization::deserialize(stream, compid);
    ros::serialization::deserialize(stream, msgid);
    ros::serialization::deserialize(stream, fromlcm);
    ros::serialization::deserialize(stream, payload);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(len);
    size += ros::serialization::serializationLength(seq);
    size += ros::serialization::serializationLength(sysid);
    size += ros::serialization::serializationLength(compid);
    size += ros::serialization::serializationLength(msgid);
    size += ros::serialization::serializationLength(fromlcm);
    size += ros::serialization::serializationLength(payload);
    return size;
  }

  typedef boost::shared_ptr< ::lcm_mavlink_ros::Mavlink_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_mavlink_ros::Mavlink_<ContainerAllocator>  const> ConstPtr;
}; // struct Mavlink
typedef  ::lcm_mavlink_ros::Mavlink_<std::allocator<void> > Mavlink;

typedef boost::shared_ptr< ::lcm_mavlink_ros::Mavlink> MavlinkPtr;
typedef boost::shared_ptr< ::lcm_mavlink_ros::Mavlink const> MavlinkConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::lcm_mavlink_ros::Mavlink_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::lcm_mavlink_ros::Mavlink_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace lcm_mavlink_ros

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::lcm_mavlink_ros::Mavlink_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cd609ddc2b0642cb6f5fb5ca07f1fb77";
  }

  static const char* value(const  ::lcm_mavlink_ros::Mavlink_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcd609ddc2b0642cbULL;
  static const uint64_t static_value2 = 0x6f5fb5ca07f1fb77ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_mavlink_ros::Mavlink_<ContainerAllocator> > {
  static const char* value() 
  {
    return "lcm_mavlink_ros/Mavlink";
  }

  static const char* value(const  ::lcm_mavlink_ros::Mavlink_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::lcm_mavlink_ros::Mavlink_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
uint8 len\n\
uint8 seq\n\
uint8 sysid\n\
uint8 compid\n\
uint8 msgid\n\
bool fromlcm\n\
uint8[] payload\n\
\n\
================================================================================\n\
MSG: roslib/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::lcm_mavlink_ros::Mavlink_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::lcm_mavlink_ros::Mavlink_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::lcm_mavlink_ros::Mavlink_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.len);
    stream.next(m.seq);
    stream.next(m.sysid);
    stream.next(m.compid);
    stream.next(m.msgid);
    stream.next(m.fromlcm);
    stream.next(m.payload);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Mavlink_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_mavlink_ros::Mavlink_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::lcm_mavlink_ros::Mavlink_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::roslib::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "len: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.len);
    s << indent << "seq: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.seq);
    s << indent << "sysid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sysid);
    s << indent << "compid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.compid);
    s << indent << "msgid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.msgid);
    s << indent << "fromlcm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fromlcm);
    s << indent << "payload[]" << std::endl;
    for (size_t i = 0; i < v.payload.size(); ++i)
    {
      s << indent << "  payload[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.payload[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // LCM_MAVLINK_ROS_MESSAGE_MAVLINK_H

